# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AJHU9mYPPW52KmedmwRjJdvmUuGZDVYq

# Project Name- Vaccination Data Analysis and Visualization

# Problem Statement- Analyze global vaccination data to understand trends in vaccination coverage, disease incidence, and effectiveness. Data will be cleaned, and stored in a SQL database. Power BI will be used to connect to the SQL database and create interactive dashboards that provide insights on vaccination strategies and their impact on disease control.

# Project Summary- The project titled "Vaccination Data Analysis and Visualization" focuses on analyzing global vaccination data to understand patterns and trends in vaccination coverage, disease incidence, and vaccine effectiveness. The project encompasses data cleaning, storage in a SQL database, and visualization using Power BI to provide actionable insights.

Key Components:
Domain: Public Health and Epidemiology

Skills Developed: Python scripting, data cleaning, Exploratory Data Analysis (EDA), SQL database management, and Power BI visualization.

Problem Statement:
Analyze vaccination data from multiple sources to assess immunization efforts, disease trends, and impact of vaccines on controlling diseases worldwide.

Objectives:
Evaluate the effectiveness of vaccination programs across regions and populations.

Identify areas with low vaccine coverage and high disease incidence for targeted interventions.

Support policy making by providing data-driven insights on vaccination strategies.

Forecast vaccine demand and allocate resources effectively.

Approach:
Data Cleaning: Handling missing data, normalizing units, and standardizing date formats for consistency.

SQL Database Setup: Creating normalized tables with relationships to store cleaned data.

Power BI Integration: Connecting SQL data to Power BI for creating interactive, user-friendly dashboards with filters, heatmaps, trend lines, and KPIs.

Exploratory Data Analysis: Using statistical summaries and correlation analysis to uncover patterns and disparities in vaccine coverage and disease incidence.

Deliverables:
A well-structured and normalized SQL database.

Python scripts for data preparation.

Power BI dashboards delivering key insights.

Documentation detailing methods, challenges, and findings.

Impact:
This project enables stakeholders such as governments, health organizations, and policymakers to make informed decisions on vaccination strategies, resource allocation, and disease prevention measures based on comprehensive data analysis and dynamic visualizations.

# Github- https://github.com/NavyArya/Vaccination-Data-Analysis-and-Visualization.git

# begin-
"""

import pandas as pd

from google.colab import files
uploaded = files.upload()

coverage_df = pd.read_csv('coverage-data.csv')
incidence_df = pd.read_csv('incidence-rate-data.csv')
reported_df = pd.read_csv('reported-cases-data.csv')
schedule_df = pd.read_csv('vaccine-schedule-data.csv')
intro_df = pd.read_csv('vaccine-introduction-data.csv')

print(coverage_df.isnull().sum())
print(incidence_df.isnull().sum())
print(reported_df.isnull().sum())
print(schedule_df.isnull().sum())
print(intro_df.isnull().sum())

coverage_df['COVERAGE'] = coverage_df['COVERAGE'].fillna(coverage_df['COVERAGE'].mean())
schedule_df['VACCINE_DESCRIPTION'] = schedule_df['VACCINE_DESCRIPTION'].fillna(schedule_df['VACCINE_DESCRIPTION'].mode()[0])
coverage_df = coverage_df.dropna()
schedule_df = schedule_df.dropna()

# If coverage is in decimal (0-1), convert to percentage
if coverage_df['COVERAGE'].max() <= 1:
    coverage_df['COVERAGE'] = coverage_df['COVERAGE'] * 100

# Round to two decimals, if needed
coverage_df['COVERAGE'] = coverage_df['COVERAGE'].round(2)

reported_df['CASES'] = reported_df['CASES'].fillna(0).astype(int)
incidence_df['INCIDENCE_RATE'] = incidence_df['INCIDENCE_RATE'].astype(float)

# Antigen description: fill missing with mode
coverage_df['ANTIGEN_DESCRIPTION'] = coverage_df['ANTIGEN_DESCRIPTION'].fillna(coverage_df['ANTIGEN_DESCRIPTION'].mode()[0])

# For other dataframes, you can drop rows if missing values are critical
incidence_df = incidence_df.dropna()
reported_df = reported_df.dropna()

print("\nAfter imputation and removal, missing values in Coverage Data:")
print(coverage_df.isnull().sum())

print("\nAfter cleaning, Incidence Rate Data shape:")
print(incidence_df.shape)
print("\nAfter cleaning, Reported Case Data shape:")
print(reported_df.shape)

# Standardize incidence rate to per 100,000 population (example)
rate_basis = 100000
incidence_df['DENOMINATOR'] = incidence_df['DENOMINATOR'].astype(str).str.extract(r'(\d+\,?\d*)').replace(',', '', regex=True).astype(float)
incidence_df['Standardized Rate'] = incidence_df.apply(
    lambda row: (row['INCIDENCE_RATE'] / row['DENOMINATOR']) * rate_basis if row['DENOMINATOR'] != rate_basis and row['DENOMINATOR'] != 0 else row['INCIDENCE_RATE'],
    axis=1
)
incidence_df['Rate Unit'] = 'per 100,000 population'

print("\nIncidence rate data sample after standardization:")
print(incidence_df[['INCIDENCE_RATE', 'DENOMINATOR', 'Standardized Rate', 'Rate Unit']].head())

# Step 6: Save cleaned and normalized data if needed
coverage_df.to_csv('cleaned_coverage_data.csv', index=False)
incidence_df.to_csv('cleaned_incidence_data.csv', index=False)
reported_df.to_csv('cleaned_reported_data.csv', index=False)

# Standardize Year columns to string format YYYY (if Year is integer or mixed type)
def format_year_column(df, column_name='YEAR'):
    # Convert to string first
    df[column_name] = df[column_name].astype(str)
    # Extract only 4 digit year if there are extra characters (e.g., timestamps)
    df[column_name] = df[column_name].str.extract(r'(\d{4})')[0]
    return df

coverage_df = format_year_column(coverage_df)
incidence_df = format_year_column(incidence_df)
reported_df = format_year_column(reported_df)
schedule_df = format_year_column(schedule_df)
intro_df = format_year_column(intro_df)

# Validate uniform Year formatting by printing unique values counts
print("Unique Years in Coverage Data:", coverage_df['YEAR'].nunique())
print("Unique Years in Incidence Data:", incidence_df['YEAR'].nunique())
print("Unique Years in Reported Cases Data:", reported_df['YEAR'].nunique())
print("Unique Years in Schedule Data:", schedule_df['YEAR'].nunique())
print("Unique Years in Introduction Data:", intro_df['YEAR'].nunique())

print("Coverage Data After Cleaning and Normalization:")
print(coverage_df)
print("\nMissing values in Coverage Data:")
print(coverage_df.isnull().sum())

print("\nIncidence Rate Data After Cleaning and Normalization:")
print(incidence_df)
print("\nMissing values in Incidence Rate Data:")
print(incidence_df.isnull().sum())

print("\nReported Cases Data After Cleaning and Normalization:")
print(reported_df)
print("\nMissing values in Reported Cases Data:")
print(reported_df.isnull().sum())

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Use the cleaned dataframes already in memory
# coverage_df and incidence_df are available from previous steps

# Print column names to verify for later use
print("Columns in coverage_df:", coverage_df.columns.tolist())
print("Columns in incidence_df:", incidence_df.columns.tolist())

# ---- Statistical Summaries ----
print("\nVaccination Coverage Summary:")
print(coverage_df['COVERAGE'].describe())         # Use actual column name for coverage

print("\nDisease Incidence Summary:")
print(incidence_df['INCIDENCE_RATE'].describe())        # Use actual column name for incidence

plt.figure(figsize=(12,6))
sns.barplot(data=coverage_df, x='GROUP', y='COVERAGE', errorbar=None) # Use correct column names
plt.title('Vaccination Coverage by Region')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# ---- Incidence Over Time (Line Graph) ----
plt.figure(figsize=(12,6))
sns.lineplot(data=incidence_df, x='YEAR', y='INCIDENCE_RATE', hue='GROUP') # Use correct column names
plt.title('Disease Incidence Over Time by Region')
plt.tight_layout()
plt.show()

# ---- Correlation Analysis and Scatter Plot ----
# Note: Correlation is calculated between two Series.
# Here, we can't directly correlate coverage and incidence across different dataframes
# unless they are merged or aggregated appropriately.
# I will skip the correlation calculation for now as the dataframes are not merged.

# Scatter plot using incidence_df
plt.figure(figsize=(12,6))
sns.scatterplot(data=incidence_df, x='YEAR', y='INCIDENCE_RATE', hue='GROUP') # Scatter plot of Incidence Rate over Time
plt.title('Disease Incidence Rate Over Time by Region')
plt.tight_layout()
plt.show()

# Scatter plot using incidence_df
plt.figure(figsize=(12,6))
sns.scatterplot(data=incidence_df, x='YEAR', y='INCIDENCE_RATE', hue='GROUP') # Scatter plot of Incidence Rate over Time
plt.title('Disease Incidence Rate Over Time by Region')
plt.tight_layout()
plt.show()

# ---- Heatmap: Coverage Region vs Year ----
pivot = coverage_df.pivot_table(values='COVERAGE', index='GROUP', columns='YEAR', aggfunc='mean') # Use correct column names
plt.figure(figsize=(12,8))
sns.heatmap(pivot, annot=False, cmap='YlGnBu') # Removed annot=True for better readability with large data
plt.title('Coverage Heatmap: Region vs Year')
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

sns.set(style="whitegrid")

df1 = pd.DataFrame({
    'region': ['Region A', 'Region B', 'Region C', 'Region D'],
    'vaccination_rate': [80, 60, 90, 50],
    'disease_incidence': [10, 25, 5, 40]
})

def corr_vacc_disease(df):
    corr = df['vaccination_rate'].corr(df['disease_incidence'])
    print(f"Correlation between vaccination rate and disease incidence: {corr:.2f}")
    sns.scatterplot(data=df, x='vaccination_rate', y='disease_incidence')
    plt.title('Vaccination Rate vs Disease Incidence')
    plt.show()

corr_vacc_disease(df1)

#2
df2 = pd.DataFrame({
    'area': ['Area 1', 'Area 2', 'Area 3'],
    'dose1_count': [1000, 800, 900],
    'dose2_count': [850, 600, 700],
    'dose3_count': [700, 400, 600]
})

def calculate_drop_off_rate(df):
    df['drop_off_1_2'] = (df['dose1_count'] - df['dose2_count']) / df['dose1_count'] * 100
    df['drop_off_2_3'] = (df['dose2_count'] - df['dose3_count']) / df['dose2_count'] * 100
    print("Drop-off rates (%) from 1st to 2nd dose and 2nd to 3rd dose:")
    print(df[['area', 'drop_off_1_2', 'drop_off_2_3']])

calculate_drop_off_rate(df2)

# 3. Vaccination rates by gender
df3 = pd.DataFrame({
    'gender': ['Male', 'Female'],
    'vaccination_rate': [70, 75]
})

def vaccination_by_gender(df):
    sns.barplot(data=df, x='gender', y='vaccination_rate')
    plt.title('Vaccination Rate by Gender')
    plt.ylim(0, 100)
    plt.show()

vaccination_by_gender(df3)

# 4. Vaccination by education level
df4 = pd.DataFrame({
    'education_level': ['No education', 'Primary', 'Secondary', 'Tertiary'],
    'vaccination_rate': [50, 65, 80, 90]
})

def vaccination_by_education(df):
    sns.barplot(data=df, x='education_level', y='vaccination_rate')
    plt.title('Vaccination Rate by Education Level')
    plt.ylim(0, 100)
    plt.show()

vaccination_by_education(df4)

# 5. Urban vs rural vaccination
df5 = pd.DataFrame({
    'location_type': ['Urban', 'Rural'],
    'vaccination_rate': [75, 55]
})

def urban_rural_vacc_comparison(df):
    sns.barplot(data=df, x='location_type', y='vaccination_rate')
    plt.title('Vaccination Rate Urban vs Rural')
    plt.ylim(0, 100)
    plt.show()

urban_rural_vacc_comparison(df5)

# 6. Booster dose uptake over time
df6 = pd.DataFrame({
    'date': pd.date_range(start='2024-01-01', periods=6, freq='M'),
    'booster_coverage': [20, 35, 45, 55, 60, 70]
})

def booster_trend(df):
    df = df.sort_values('date')
    plt.plot(df['date'], df['booster_coverage'], marker='o')
    plt.title('Booster Dose Uptake Over Time')
    plt.xlabel('Date')
    plt.ylabel('Booster Coverage (%)')
    plt.xticks(rotation=45)
    plt.ylim(0,100)
    plt.show()

booster_trend(df6)

# 7. Seasonal vaccination uptake
df7 = pd.DataFrame({
    'month': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    'vaccination_count': [100, 110, 120, 150, 170, 130, 120, 100, 80, 90, 140, 160]
})

def seasonal_vaccination_pattern(df):
    sns.lineplot(data=df, x='month', y='vaccination_count', marker='o')
    plt.title('Seasonal Pattern in Vaccination Uptake')
    plt.show()

seasonal_vaccination_pattern(df7)

# 8. Population density vs vaccination coverage
df8 = pd.DataFrame({
    'region': ['R1', 'R2', 'R3', 'R4', 'R5'],
    'population_density': [100, 200, 500, 1000, 2000],
    'vaccination_rate': [55, 60, 70, 65, 50]
})

def pop_density_vs_vacc(df):
    sns.scatterplot(data=df, x='population_density', y='vaccination_rate')
    plt.title('Population Density vs Vaccination Coverage')
    plt.show()

pop_density_vs_vacc(df8)

# 9. Regions with high disease incidence despite high vaccination rates
df9 = pd.DataFrame({
    'region': ['Rg1', 'Rg2', 'Rg3', 'Rg4', 'Rg5'],
    'vaccination_rate': [75, 80, 65, 90, 85],
    'disease_incidence': [55, 40, 60, 30, 70]
})

def high_disease_high_vacc_regions(df, vacc_threshold=70, disease_threshold=50):
    filtered = df[(df['vaccination_rate'] > vacc_threshold) & (df['disease_incidence'] > disease_threshold)]
    print("Regions with high disease incidence despite high vaccination rate:")
    print(filtered[['region', 'vaccination_rate', 'disease_incidence']])

high_disease_high_vacc_regions(df9)

# 1. Correlation between vaccine introduction and decrease in disease cases
df1 = pd.DataFrame({
    'year': list(range(2010, 2025)),
    'cases': [1000, 900, 850, 750, 500, 300, 200, 150, 100, 80, 60, 50, 40, 30, 20],
    'vaccination_started': [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
})

def corr_vaccine_intro_decrease(df):
    corr_before = df[df['vaccination_started'] == 0]['cases'].corr(df[df['vaccination_started'] == 0]['year'])
    corr_after = df[df['vaccination_started'] == 1]['cases'].corr(df[df['vaccination_started'] == 1]['year'])
    print(f"Correlation between year and cases before vaccination: {corr_before:.2f}")
    print(f"Correlation between year and cases after vaccination: {corr_after:.2f}")
    plt.plot(df['year'], df['cases'], marker='o')
    plt.axvline(df[df['vaccination_started'] == 1]['year'].min(), color='red', linestyle='--', label='Vaccination Start')
    plt.title('Disease Cases Before and After Vaccination Start')
    plt.xlabel('Year')
    plt.ylabel('Cases')
    plt.legend()
    plt.show()

corr_vaccine_intro_decrease(df1)

# 2. Trend in disease cases before and after vaccination campaigns (same data)
def trend_before_after(df):
    before = df[df['vaccination_started'] == 0]['cases']
    after = df[df['vaccination_started'] == 1]['cases']
    print("Average cases before vaccination start:", before.mean())
    print("Average cases after vaccination start:", after.mean())
    sns.lineplot(data=df, x='year', y='cases')
    plt.axvline(df[df['vaccination_started'] == 1]['year'].min(), color='red', linestyle='--', label='Vaccination Start')
    plt.title('Trend of Disease Cases Before and After Vaccination')
    plt.legend()
    plt.show()

trend_before_after(df1)

# 3. Diseases with most reduction in cases due to vaccination
df3 = pd.DataFrame({
    'disease': ['Measles', 'Diphtheria', 'Polio', 'Hepatitis B', 'Pertussis'],
    'cases_reduced_millions': [56, 31, 25, 20, 15]
})

sns.barplot(data=df3, x='disease', y='cases_reduced_millions')
plt.title('Reduction in Disease Cases Due to Vaccination (Millions)')
plt.show()

# 4. Percentage of target population covered by each vaccine
df4 = pd.DataFrame({
    'vaccine': ['Measles', 'Polio', 'Hepatitis B', 'COVID-19'],
    'coverage_percent': [85, 90, 70, 58]
})

sns.barplot(data=df4, x='vaccine', y='coverage_percent')
plt.title('Target Population Coverage by Vaccine (%)')
plt.ylim(0, 100)
plt.show()

# 5. Impact of vaccination schedule on target population coverage
df5 = pd.DataFrame({
    'vaccine': ['DTP', 'Hepatitis B', 'COVID-19'],
    'doses': [3, 3, 2],
    'coverage_percent': [80, 70, 58]
})

sns.scatterplot(data=df5, x='doses', y='coverage_percent', hue='vaccine', s=100)
plt.title('Impact of Vaccination Schedule on Coverage')
plt.xlabel('Number of Doses Required')
plt.ylabel('Coverage (%)')
plt.ylim(0, 100)
plt.show()

# 6. Disparities in vaccine introduction timelines across WHO regions
df6 = pd.DataFrame({
    'region': ['Africa', 'Americas', 'Europe', 'South-East Asia', 'Western Pacific'],
    'median_year_introduction': [2014, 2010, 2008, 2012, 2011]
})

sns.barplot(data=df6, x='region', y='median_year_introduction')
plt.title('Median Year of Vaccine Introduction by WHO Region')
plt.show()

# 7. Correlation of vaccine coverage with disease reduction for specific antigens
df7 = pd.DataFrame({
    'vaccine': ['Measles', 'Polio', 'Hepatitis B'],
    'coverage_percent': [85, 90, 70],
    'disease_reduction_percent': [90, 95, 65]
})

sns.scatterplot(data=df7, x='coverage_percent', y='disease_reduction_percent', hue='vaccine', s=100)
plt.title('Vaccine Coverage vs Disease Reduction')
plt.xlabel('Coverage (%)')
plt.ylabel('Disease Reduction (%)')
plt.show()

# 8. Regions with low coverage despite high availability of vaccines
df8 = pd.DataFrame({
    'region': ['Region A', 'Region B', 'Region C', 'Region D'],
    'vaccine_availability': [90, 95, 80, 85],
    'coverage_percent': [50, 40, 70, 55]
})

low_coverage = df8[df8['coverage_percent'] < 60]
print("Regions with low vaccination coverage despite high vaccine availability:")
print(low_coverage)

sns.scatterplot(data=df8, x='vaccine_availability', y='coverage_percent')
plt.title('Vaccine Availability vs Coverage')
plt.xlabel('Vaccine Availability (%)')
plt.ylabel('Vaccination Coverage (%)')
plt.show()

# 9. Gaps in coverage for vaccines targeting high-priority diseases
df9 = pd.DataFrame({
    'vaccine': ['BCG', 'Hepatitis B Birth Dose', 'PCV'],
    'target_coverage': [90, 90, 90],
    'actual_coverage': [85, 65, 75]
})

df9['gap_percent'] = df9['target_coverage'] - df9['actual_coverage']
print("Coverage gaps for high-priority disease vaccines:")
print(df9[['vaccine', 'gap_percent']])

sns.barplot(data=df9, x='vaccine', y='gap_percent')
plt.title('Coverage Gaps for High-Priority Vaccines')
plt.show()

# 10. Disease prevalence in specific geographic areas
df10 = pd.DataFrame({
    'disease': ['TB', 'Malaria', 'Yellow Fever', 'Hepatitis B'],
    'prevalent_region': ['Sub-Saharan Africa', 'Tropical Regions', 'West Africa', 'East Asia']
})

print("Disease prevalence by geographic area:")
print(df10)

# 1. Identify regions with low vaccination coverage
df1 = pd.DataFrame({
    'region': ['North', 'South', 'East', 'West', 'Central'],
    'vaccination_coverage': [72, 55, 80, 45, 60]
})

low_coverage_regions = df1[df1['vaccination_coverage'] < 70]
print("Regions with low vaccination coverage (<70%):")
print(low_coverage_regions)

# 2. Evaluate effectiveness of measles vaccination campaign (5 years ago)
df2 = pd.DataFrame({
    'year': list(range(2016, 2026)),
    'measles_cases': [1500, 1300, 1200, 1000, 900, 400, 350, 300, 250, 200]
})

plt.figure(figsize=(8, 5))
sns.lineplot(data=df2, x='year', y='measles_cases', marker='o')
plt.axvline(2021, color='red', linestyle='--', label='Vaccination Campaign Start')
plt.title('Measles Cases Before and After Vaccination Campaign')
plt.ylabel('Number of Cases')
plt.xlabel('Year')
plt.legend()
plt.show()

# 3. Estimate vaccine demand for disease in upcoming year
df3 = pd.DataFrame({
    'age_group': ['0-4', '5-14', '15-24', '25-64', '65+'],
    'population': [100000, 150000, 120000, 300000, 80000],
    'current_coverage': [0.75, 0.85, 0.80, 0.70, 0.90]
})
df3['vaccine_demand'] = df3['population'] * (1 - df3['current_coverage'])
print("Estimated Vaccine Demand by Age Group:")
print(df3[['age_group', 'vaccine_demand']])

# 4. Ramp up vaccination due to influenza outbreak
df4 = pd.DataFrame({
    'region': ['North', 'South', 'East', 'West'],
    'influenza_cases': [30, 150, 10, 5],
    'current_coverage': [0.6, 0.5, 0.7, 0.8]
})
outbreak_region = df4.loc[df4['influenza_cases'].idxmax()]
print(f"Region with highest outbreak: {outbreak_region['region']} with {outbreak_region['influenza_cases']} cases")
print(f"Current vaccination coverage there: {outbreak_region['current_coverage']*100:.1f}%")

# 5. Polio incidence by vaccination status
df5 = pd.DataFrame({
    'population_group': ['Unvaccinated', 'Partially Vaccinated', 'Fully Vaccinated'],
    'polio_incidence_per_100k': [25, 10, 1]
})

sns.barplot(data=df5, x='population_group', y='polio_incidence_per_100k')
plt.title('Polio Incidence by Vaccination Status')
plt.ylabel('Incidence per 100,000')
plt.show()

# 6. Track global progress toward 95% measles coverage by 2030
df6 = pd.DataFrame({
    'year': list(range(2020, 2032)),
    'global_measles_coverage': [85, 87, 88, 89, 90, 91, 92, 92.5, 93, 93.5, 94, 95]
})

plt.figure(figsize=(8, 5))
sns.lineplot(data=df6, x='year', y='global_measles_coverage', marker='o')
plt.axhline(95, color='green', linestyle='--', label='Target 95%')
plt.title('Global Measles Vaccination Coverage Progress')
plt.xlabel('Year')
plt.ylabel('Coverage (%)')
plt.legend()
plt.show()

# 7. Allocate vaccines for high-risk populations (children <5 and elderly)
df7 = pd.DataFrame({
    'age_group': ['0-4', '5-17', '18-64', '65+'],
    'population': [120000, 300000, 500000, 80000],
    'current_coverage': [0.7, 0.8, 0.6, 0.9]
})
df7['doses_needed'] = df7['population'] * (1 - df7['current_coverage'])
print("Vaccines needed for high-risk groups:")
print(df7.loc[df7['age_group'].isin(['0-4', '65+'])][['age_group', 'doses_needed']])

# 8. Detect disparities in vaccination by socioeconomic groups
df8 = pd.DataFrame({
    'socioeconomic_status': ['Low', 'Middle', 'High'],
    'vaccination_coverage': [55, 70, 90]
})

sns.barplot(data=df8, x='socioeconomic_status', y='vaccination_coverage')
plt.title('Vaccination Coverage by Socioeconomic Status')
plt.ylabel('Coverage (%)')
plt.ylim(0, 100)
plt.show()

# 9. Variation of vaccination rates throughout the year
df9 = pd.DataFrame({
    'month': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    'vaccination_rate': [20, 22, 30, 45, 60, 70, 65, 55, 45, 40, 35, 25]
})

sns.lineplot(data=df9, x='month', y='vaccination_rate', marker='o')
plt.title('Vaccination Rate Variation Throughout the Year')
plt.ylabel('Vaccination Rate (%)')
plt.show()

# 10. Compare door-to-door vs centralized vaccination strategies
df10 = pd.DataFrame({
    'region': ['Region A', 'Region B'],
    'strategy': ['Door-to-door', 'Centralized Clinic'],
    'coverage_percent': [85, 75],
    'population_vaccinated': [85000, 75000]
})

sns.barplot(data=df10, x='strategy', y='coverage_percent')
plt.title('Vaccination Coverage by Strategy')
plt.ylabel('Coverage (%)')
plt.ylim(0, 100)
plt.show()

print("Population vaccinated by strategy:")
print(df10[['strategy', 'population_vaccinated']])